import express, { Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import dotenv from 'dotenv';
import { User } from '../DB/index';

dotenv.config();

const router = express.Router();

// Define the shape of the request body using TypeScript interfaces
interface SignupRequestBody {
    username: string;
    password: string;
}

interface SigninRequestBody {
    username: string;
    password: string;
}

// Signup Endpoint
router.post('/signup', async (req: Request<{}, {}, SignupRequestBody>, res: Response) => {
    const { username, password } = req.body;
    const saltRounds = 10;

    try {
        const user = await User.findOne({ username });
        if (user) {
            return res.status(403).json({
                message: "User already exists"
            });
        }

        bcrypt.hash(password, saltRounds, async (err, hash) => {
            if (err) {
                return res.status(500).json({
                    message: "Error in hashing the password",
                    error: err.message
                });
            }

            const newUser = new User({ username, hash });
            await newUser.save();

            return res.status(201).json({
                message: "Signup successful",
                username,
                hash
            });
        });

    } catch (error) {
        return res.status(500).json({
            message: "Error in creating user",
            error: (error as Error).message
        });
    }
});

// Signin Endpoint
router.post('/signin', async (req: Request<{}, {}, SigninRequestBody>, res: Response) => {
    const { username, password } = req.body;

    try {
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(404).json({
                message: "User not found"
            });
        }

        bcrypt.compare(password, user.hash, (err, result) => {
            if (err) {
                return res.status(500).json({
                    message: "Error during password comparison"
                });
            }
            if (result) {
                const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET || '', { expiresIn: '1h' });
                return res.json({
                    token,
                    message: "Password matched"
                });
            } else {
                return res.status(401).json({
                    message: "Password mismatch"
                });
            }
        });

    } catch (error) {
        return res.status(500).json({
            message: "Server error",
            error: (error as Error).message
        });
    }
});

export default router;
